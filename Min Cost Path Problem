Min Cost Path Problem
Send Feedback
An integer matrix of size (M x N) has been given. Find out the minimum cost to reach from the cell (0, 0) to (M - 1, N - 1).
From a cell (i, j), you can move in three directions:
1. ((i + 1),  j) which is, "down"
2. (i, (j + 1)) which is, "to the right"
3. ((i+1), (j+1)) which is, "to the diagonal"
The cost of a path is defined as the sum of each cell's values through which the route passes.
 Input format :
The first line of the test case contains two integer values, 'M' and 'N', separated by a single space. They represent the 'rows' and 'columns' respectively, for the two-dimensional array/list.

The second line onwards, the next 'M' lines or rows represent the ith row values.

Each of the ith row constitutes 'N' column values separated by a single space.
Output format :
Print the minimum cost to reach the destination.
Constraints :
1 <= M <= 10 ^ 2
1 <= N <=  10 ^ 2

Time Limit: 1 sec
Sample Input 1 :
3 4
3 4 1 2
2 1 8 9
4 7 8 1
Sample Output 1 :
13
Sample Input 2 :
3 4
10 6 9 0
-23 8 9 90
-200 0 89 200
Sample Output 2 :
76
Sample Input 3 :
5 6
9 6 0 12 90 1
2 7 8 5 78 6
1 6 0 5 10 -4 
9 6 2 -10 7 4
10 -2 0 5 5 7
Sample Output 3 :
18




## Read input as specified in the question.
## Print output as specified in the question.
import sys
def minCost(li,dp,i,j,cost,m,n):
    if i == m-1 and j == n-1:
        return li[i][j]
    if i >= m or j >= n:
        return sys.maxsize
    value1 = sys.maxsize
    if i != m-1:
        if dp[i+1][j] == -1:
            value1 = minCost(li,dp,i+1,j,cost,m,n)
            dp[i+1][j] = value1
        else:
            value1 = dp[i+1][j]
    value2 = sys.maxsize
    if j != n-1:
        if dp[i][j+1] == -1:
            value2 = minCost(li,dp,i,j+1,cost,m,n)
            dp[i][j+1] = value2
        else:
            value2 = dp[i][j+1]
    
    value3 = sys.maxsize
    if i != m-1 or j != n-1:    
        if dp[i+1][j+1] == -1:
            value3 =  minCost(li,dp,i+1,j+1,cost,m,n)
            dp[i+1][j+1] = value3
        else:
            value3 = dp[i+1][j+1]
        
    cost = li[i][j] + min(value1,value2,value3)
    
    return cost
        
    
















m, n = (int(x) for x in input().split())

li = [[-1 for j in range(n)] for i in range(m) ]

for i in range(m):
    li[i] = [int(x) for x in input().split()]

dp = [[-1 for j in range(n+1)] for i in range(m+1) ]
cost = 0
print(minCost(li,dp,0,0,cost,m,n))
